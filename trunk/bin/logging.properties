# der ConsoleHandler gibt die Nachrtichten auf std.err aus
handlers= java.util.logging.ConsoleHandler

# Alternativ können weitere Handler hinzugenommen werden. hier z.B:der Filehandler
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

#festlegen der Default Loglevels
#Levels sind SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL
.level= WARNING

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output soll im gleichen Verzeichnis gespeichert werden
java.util.logging.FileHandler.pattern = ./testel.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
#Ausgabe als XML-Datei
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# zusätzlich zu den normalen Logleveln kann für jeden Handler noch ein eigener Filter 
# vergeben werden. Das ist nützlich wenn beispielsweise alle Nachrichten auf der Konsole ausgeben werden sollen
# aber nur ab INFO in das Logfile geschrieben werden soll.
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

############################################################
# Extraeinstellungen für einzelne Logger
############################################################

# für einzelne Logger kann hier ein eigenes Loglevel fest gelegt werden.
#z.B. Spracheinstellungen werden ganz fein geloggt
#de.beimax.testel.html.HTMLParser.level = FINEST
