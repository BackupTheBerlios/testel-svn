#############################################################
#Testel-Properties-Datei mit Einstellungen
#Diese Datei wird automatisch geladen, außer man übergibt
#TestEl per Parameter --config einen anderen Wert
#############################################################
#Sprache, die geparst werden soll
lang=de
#Werden pretrainierte Daten komprimiert (Werte true/false)?
pretrained-gzip=false
#Werden trainierte Daten komprimiert (Werte true/false)?
trained-gzip=true
#Werden getaggte Daten komprimiert (Werte true/false)?
tag-gzip=false
#Speicherort für Sprachdaten - es wird immer noch das Länderkürzel angehängt,
#also z.B. ./data/de
languages-dir=./corpus/lang
#Falls der Content nicht erkannt wird, wird auf diesen Mime-Typ zurückgegriffen...
defaultcontent=text/html
#Wo liegen die DTDs für die TestEl-Beschreibungsdateien
dtdforxml=corpus/testeldescription.dtd

#############################################################
#Verschiedene Klassen, die durch Spezialisierung überschrieben
#werden könnten
#############################################################
#Der Handler ist der Kern der Anwendung - falls dieser überschrieben
#wird, kann man TestEl.java dazu veranlassen, durch Änderung
#eine andere Klasse zu laden. 
#testelhandler=de.beimax.testel.TestElHandler
#testeltagger=de.beimax.testel.TaggerImpl

#############################################################
#HTML
#############################################################
#Verzeichnis für HTML-spezifische Daten
#Muss die verzeichnisse pretrained und trained enthalten!
directory_text/html=./corpus/html
#Mimefactory für HTML
mimefactory_text/html=de.beimax.testel.mime.html.MimeFactoryImpl
#TaggerCollection für den HTML-Parser
#Angefangen wird mit taggercollection_ und dann wird der mime-Type angehängt
taggercollection_text/html=de.beimax.testel.mime.ImageTagger,\
						de.beimax.testel.mime.html.HTMLTextStyleTagger
#Soll die Klassifizierer-Corpus-XML-Datei gzipped werden?
gzip_reference_text/html=true
#Soll die Referenz-Corpus-XML-Datei gzipped werden?
gzip_classifiers_text/html=true
#sollen trainierte Dateien gzipped werden?
gzip_trained_text/html=true
#Normalizer-Einstellungen
#========================
#Vor dem weiteren Parsen CSS-Daten in die Datei integrieren (Werte true/false)
#Der SimpleCSSParser ist eigentlich nicht nötig, kann aber bei Problemen
#möglicherweise helfen
HTMLincludecss=false
#Lobobrowser-Transformation benutzen (Werte true/false)
#Hier wird JS zu HTML konvertiert und die CSS-properties in die Knoten verlagert
HTMLtransform=true
#JTidy benutzen (Werte true/false)
HTMLtidy=true
#Konfigdatei von tidy
HTMLtidy_config=./tidy.config
#CSS-Medien-Typ für den SimpleCSSParser (default = screen)
CSS_mediatype=print
#Lobo-Browser-Zeitspanne (in ms), die Lobo arbeitet
Lobo-Sleep=10000

#############################################################
#Deutsch (de)
#############################################################
#SubTagger für den LanguageTagger
#Liste der SubTagger (JavaKlassen)
#Spezielle Einstellung: NUMPARSER holt von der Langfactory einen NumSubTagger per
#handler.getLangFactory().createNumberParser(handler);
#es gibt zwei Durchläufe 1 & 2
subtaggers_1_de=NUMPARSER,\
	de.beimax.testel.lang.SingleLetterCounterSubTagger,\
	de.beimax.testel.lang.PunctuationSubTaggerUTF,\
	de.beimax.testel.lang.NumberPointCombinationSubTagger,\
	de.beimax.testel.lang.MeaningfulWordsSubTagger
subtaggers_2_de=de.beimax.testel.lang.AbbreviationSubTagger

#############################################################
#Klassifizierer
#############################################################
#Klassifizierer für deutsche html/de-Dateien
#classifier_text/html_de=de.beimax.testel.classifier.impl.TestElNaiveBayesClassifier
classifier_text/html_de=de.beimax.testel.classifier.impl.TestElVectorClassifier
#Wie viele Endtags werden maximal vom Matcher pro Klassifizierer weit nach vorne geschaut?
maxEndCounters=20
